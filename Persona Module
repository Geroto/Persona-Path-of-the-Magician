{
    
  // Define a class called Persona
class Persona {
    constructor(actor) {
      this.name = actor.name();
      this.actorId = actor.actorId();
      this.meta = this.parseNoteTags(actor.note);
    }
  
    parseNoteTags(note) {
      const re = /<([^<>:]+)(:?)([^>]*)>/g;
      const meta = {};
      for (;;) {
        const match = re.exec(note);
        if (match) {
          if (match[2] === ':') {
            meta[match[1]] = match[3];
          } else {
            meta[match[1]] = true;
          }
        } else {
          break;
        }
      }
      return meta;
    }
  }
  
  // Create an array to store Persona instances
  let PersonasList = [];
  let PersonaMap = new Map();
  
  const Game_Actor_setup = Game_Actor.prototype.setup;
  Game_Actor.prototype.setup = function(actorId) {
    Game_Actor_setup.call(this, actorId);
    this.tipo = $dataActors[actorId].meta.tipo || null;
    if (this.tipo === 'Persona' && !PersonaMap.has(actorId)) {
      const persona = new Persona(this);
      PersonasList.push(persona);
      PersonaMap.set(actorId, persona);
    }
  };

  Window_Status.prototype.drawActorNickname = function (actor, x, y, width = 270) {
    this.resetTextColor();
    if (actor.tipo) {
        this.drawText(actor.tipo, x, y, width);
    } else {
        this.drawText(actor.nickname(), x, y, width);
    }
};
  
  const Scene_Boot_create = Scene_Boot.prototype.create;
  Scene_Boot.prototype.create = function() {
    Scene_Boot_create.call(this);
    DataManager.setupLoadedEvent();
  };
  
  DataManager.setupLoadedEvent = function() {
    if (this.isDatabaseLoaded() && !this._loadedEvent) {
      this._loadedEvent = true;
      PersonasList = [];
      for (let i = 1; i < $dataActors.length; i++) {
        const actor = $gameActors.actor(i);
        if (actor) {
          actor.setup(i);
        }
      }
    }
  };
  
  
  const _Game_Interpreter_pluginCommand = Game_Interpreter.prototype.pluginCommand;
  Game_Interpreter.prototype.pluginCommand = function(command, args) {
    _Game_Interpreter_pluginCommand.call(this, command, args);
    if (command === 'OpenPersonaList') {
      SceneManager.push(Scene_PersonaList);
    }
  };       

function Scene_PersonaList() {
    this.initialize.apply(this, arguments);
  }
  
  Scene_PersonaList.prototype = Object.create(Scene_MenuBase.prototype);
  Scene_PersonaList.prototype.constructor = Scene_PersonaList;
  
  Scene_PersonaList.prototype.initialize = function() {
    Scene_MenuBase.prototype.initialize.call(this);
  };
  
  Scene_PersonaList.prototype.create = function() {
    Scene_MenuBase.prototype.create.call(this);
    this.createPersonaListWindow();
  };
  
  Scene_PersonaList.prototype.createPersonaListWindow = function() {
    const height = Graphics.boxHeight;
    const width = Graphics.boxWidth / 2;
    const x = 0;
    const y = 0;
    this._personaListWindow = new Window_PersonaList(x, y, width, height);
    this._personaListWindow.setHandler("ok", this.onPersonaListOk.bind(this));
    this._personaListWindow.setHandler("cancel", this.onPersonaListCancel.bind(this));
    this.addWindow(this._personaListWindow);
  };
  
  Scene_PersonaList.prototype.onPersonaListOk = function() {
    const personaListWindow = this._personaListWindow;
    const persona = personaListWindow.item();
    if (persona) {
      // Implement what happens when an item is selected (optional).
      // For example, you can open a new scene with detailed information about the selected element.
    } else {
      SoundManager.playBuzzer();
    }
  };
  
  Scene_PersonaList.prototype.onPersonaListCancel = function() {
    SceneManager.pop();
  };

  function Window_PersonaList() {
    this.initialize.apply(this, arguments);
  }
  
  Window_PersonaList.prototype = Object.create(Window_Selectable.prototype);
  Window_PersonaList.prototype.constructor = Window_PersonaList;
  
  Window_PersonaList.prototype.initialize = function(x, y, width, height) {
    Window_Selectable.prototype.initialize.call(this, x, y, width, height);
    this.refresh();
    this.select(0);
    this.activate();
  };
  
  Window_PersonaList.prototype.maxCols = function() {
    return 1;
  };
  
  Window_PersonaList.prototype.maxItems = function() {
    return PersonasList.length; // Assuming you have a global array called PersonasList with the list of elements.
  };
  
  Window_PersonaList.prototype.item = function() {
    return PersonasList[this.index()]; // Assuming PersonasList is a global array containing the elements.
  };
  
  Window_PersonaList.prototype.includes = function(persona) {
    return PersonasList.includes(persona); // Assuming PersonasList is a global array containing the elements.
  };
  
  Window_PersonaList.prototype.makeItemList = function() {
    // Not needed if you have a global array like PersonasList already prepared.
  };
  
  Window_PersonaList.prototype.isEnabled = function(persona) {
    return true; // Return true to make all personas selectable
  };
  
  Window_PersonaList.prototype.drawItem = function(index) {
    const persona = PersonasList[index]; // Assuming PersonasList is a global array containing the elements.
    if (persona) {
      const rect = this.itemRect(index);
      this.changeTextColor(this.normalColor());
      this.changePaintOpacity(this.isEnabled(persona));
      this.drawText(persona.name, rect.x, rect.y, rect.width);
    }
  };
  
  Window_PersonaList.prototype.refresh = function() {
    this.createContents();
    this.drawAllItems();
  };

  if (PersonasList.length > 0) {
    // The Persona list contains actors
    // You can do something with the list here
    console.log('Persona list contains actors:', PersonasList);
  } else {
    // The Persona list is empty, there are no actors
    console.log('Persona list is empty.');
  }
  }; 
