{
Ps = {
    personamembers: [],
};


// Retain a reference to the original function
const Game_Actor_setup = Game_Actor.prototype.setup;

// Define a new property called "isPersona" for the Actor class
Game_Actor.prototype.isPersona = function() {
    return this.actor().meta.race === 'Persona';
  };
  
  // Returns an object containing all Persona actors
function getPersonaActors() {
    var personaActors = {};
    $gameActors.forEach(function(actor) {
      if (actor.isPersona) {
        personaActors[actor.actorId()] = actor;
      }
    });
    return personaActors;
  };  

  // Subclass the Game_Party class to create the Game_PartyPersona class
  class Game_PartyPersona extends Game_Party {
    constructor() {
      super();
      this._menuActorId = 0;
      this._targetActorId = 0;
      this._actors = [];
      this._personaMembers = []; // new array to store Persona members
    }
    
    static maxMembers() {
        return 4;
    }
    
    personaMembers() {
      return this.allMembers().filter(actor => actor.isPersona());
    }
   
};

Game_PartyPersona.prototype.addActor = function(actorId) {
    if (this._actors.length >= Game_PartyPersona.maxMembers()) {
        return false; // Return false if the Party Persona is already full
    }  
        
        var actor = $gameActors.actor(actorId);
        if (actor && !this._actors.includes(actor)) {
            this._actors.push(actor);
            actor.setPartyPersonaId(this._id);
            
            // Add the persona actor to _personaMembers array
            if (actor.isPersona()) {
                this._personaMembers.push(actor);
            }
            
            this.onChange();
            return true;
        }
        
        return false;
    };
    

    Game_PartyPersona.prototype.removeActor = function(actorId) {
        var actor = $gameActors.actor(actorId);
        var index = this._actors.indexOf(actor);
        if (index >= 0) {
            this._actors.splice(index, 1);
            actor.setPartyPersonaId(0);
            if (actor.isPersona()) {
                var pIndex = PS.personamembers.indexOf(actor);
                if (pIndex >= 0) {
                    PS.personamembers.splice(pIndex, 1);
                }
            }
            this.onChange();
        }
    };
    
    var actor = $gameActors.actor(actorId);
    if (actor && actor.isPersona() && !PS.personamembers.includes(actor)) {
      PS.personamembers.push(actor);
      actor.setPartyPersonaId($gamePartyPersona._id);
      $gamePartyPersona.onChange();
    }
   

Game_PartyPersona.prototype.setupStartingPersonas = function() {
    this.addActor(10);
  };
  

  DataManager = function() {
    // Call the original createGameObjects function
    DataManager.createGameObjects.call(this);
  
    // Create $gamePartyPersona
    $gamePartyPersona = new Game_PartyPersona();
  };
   
// Equips the specified Persona actor to Morgana

   
// Add a new menu command
Window_MenuCommand.prototype.addPersonasCommand = function() {
  this.addCommand('Personas', 'personas', true);
};

// Override the standard addOriginalCommands method to include the new menu command
var _Window_MenuCommand_addOriginalCommands = Window_MenuCommand.prototype.addOriginalCommands;
Window_MenuCommand.prototype.addOriginalCommands = function() {
  _Window_MenuCommand_addOriginalCommands.call(this);
  this.addPersonasCommand();
};

//Add Personas command to Main Menu
Scene_Menu.prototype.createCommandWindow = function() {
  this._commandWindow = new Window_MenuCommand(0, 0);
  this._commandWindow.setHandler('personas', this.commandPersonas.bind(this)); // Add this line
  this._commandWindow.setHandler('item', this.commandItem.bind(this));
  this._commandWindow.setHandler('skill', this.commandPersonal.bind(this));
  this._commandWindow.setHandler('equip', this.commandPersonal.bind(this));
  this._commandWindow.setHandler('status', this.commandPersonal.bind(this));
  this._commandWindow.setHandler('options', this.commandOptions.bind(this));
  this._commandWindow.setHandler('save', this.commandSave.bind(this));
  this._commandWindow.setHandler('gameEnd', this.commandGameEnd.bind(this));
  this._commandWindow.setHandler('cancel',    this.popScene.bind(this));
  this.addWindow(this._commandWindow);
};

//create the ccommandPersonas method
Scene_Menu.prototype.commandPersonas = function() {
    SceneManager.push(Scene_Personas);
  };
  
  Scene_Menu.prototype.onPersonalCancel = function() {
    this._statusWindow.deselect();
    this._commandWindow.activate();
};

//create the Scene_MenuPersona class, which will display the list of actors with the <Persona> note tag in a window

function Scene_Personas() {
    this.initialize.apply(this, arguments);
}

Scene_Personas.prototype = Object.create(Scene_MenuBase.prototype);
Scene_Personas.prototype.constructor = Scene_Personas;

Scene_Personas.prototype.initialize = function() {
    Scene_MenuBase.prototype.initialize.call(this);
};

Scene_Personas.prototype.create = function() {
    Scene_MenuBase.prototype.create.call(this);
    this.createWindowPersonaList();
};

Scene_Personas.prototype.createWindowPersonaList = function() {
    const height = Graphics.boxHeight;
    const width = Graphics.boxWidth / 2;
    const x = 0;
    const y = 0;
    this._personaListWindow = new Window_PersonaList(x, y, width, height);
    this._personaListWindow.setHandler("ok", this.onPersonaListOk.bind(this));
    this._personaListWindow.setHandler("cancel", this.onPersonaListCancel.bind(this));
    this.addWindow(this._personaListWindow);
};

Scene_Personas.prototype.onPersonaListOk = function() {
    const personaListWindow = this._personaListWindow;
    const persona = personaListWindow.item();
    if (persona) {
        SceneManager.push(Scene_Status);
        SceneManager.prepareNextScene([persona.actorId(), true]);
    } else {
        SoundManager.playBuzzer();
    }
};

Scene_Personas.prototype.onPersonaListCancel = function() {
    SceneManager.pop();
};

//define de Window_PersonaList
function Window_PersonaList() {
    this.initialize.apply(this, arguments);
   }

Window_PersonaList.prototype = Object.create(Window_Selectable.prototype);
Window_PersonaList.prototype.constructor = Window_PersonaList;

Window_PersonaList.prototype.initialize = function(x, y, width, height) {
    Window_Selectable.prototype.initialize.call(this, x, y, width, height);
    this.refresh();
    this.select(0);
    this.activate();
    this.createContents();
};

Window_PersonaList.prototype.maxCols = function() {
    return 1;
  };
  
  Window_PersonaList.prototype.maxItems = function() {
    return $gamePartyPersona.personaMembers().length;
  };
  
  Window_PersonaList.prototype.includes = function(actor) {
    return $gamePartyPersona.personaMembers().includes(actor.actorId());
  };
  
  Window_PersonaList.prototype.makeItemList = function() {
    this._data = $gamePartyPersona.personaMembers();
  };
  
Window_PersonaList.prototype.drawItem = function(index) {
    const actor = this._data[index];
    const rect = this.itemRect(index);
    const nameWidth = rect.width * 0.6;
    const levelWidth = rect.width * 0.2;
    const nicknameWidth = rect.width * 0.2;
    
    this.changeTextColor(this.normalColor());
    this.changePaintOpacity(this.isEnabled(actor));
    this.drawText(actor.name(), rect.x, rect.y, nameWidth);
    this.drawText(actor.level, rect.x + nameWidth, rect.y, levelWidth, 'right');
    this.drawText(actor.nickname, rect.x + nameWidth + levelWidth, rect.y, nicknameWidth, 'right');
};

Window_PersonaList.prototype.refreshStatus = function() {
    console.log("refreshStatus called");
    this.contents.clear();
    if (this._persona) {
      console.log("_persona exists");
      const x = 0;
      const y = this.lineHeight();
      const width = this.contentsWidth();
      const height = this.lineHeight() * 4;
      const lineHeight = this.lineHeight();
      this.drawPersonaFace(this._persona, x, y, width, height);
      this.drawText(this._persona.name(), x + 140, y, width);
      this.drawText(`Level: ${this._persona.level}`, x, y + lineHeight * 2, width);
      this.drawText(`HP: ${this._persona.hp}/${this._persona.mhp}`, x, y + lineHeight * 3, width);
      this.drawText(`SP: ${this._persona.sp}/${this._persona.msp}`, x, y + lineHeight * 4, width);
    } else {
      console.log("_persona is undefined");
    }
  };

  Window_PersonaList.prototype.select = function(index) {
    this._index = index;
    this.refresh();
    if (this._actor.isPersona()) {
        this._enableEquipCommand = true;
        this._selectedPersona = true;
    }
    else {
        this._enableEquipCommand = false;
        this._selectedPersona = false;
    }
};

Window_PersonaList.prototype.changePersona = function(persona) {
    const actor = this._actor;
    if (actor.isPersona() && this._selectedPersona && $gamePartyPersona.personaMembers().includes(actor)) {
        const prevPersona = actor.personaData();
        $gamePartyPersona.changePersona(actor.actorId(), persona.id);
        actor.setPersona(persona);
        const newClass = $dataClasses[prevPersona.classId];
        const oldClass = $dataClasses[actor._classId];
        if (newClass !== oldClass) {
            actor.changeClass(prevPersona.classId, false);
        }
        this._enableEquipCommand = false;
        this._selectedPersona = false;
        this.refresh();
    }
};

Window_PersonaList.prototype.makeCommandList = function() {
    this._enableEquipCommand = false;
    this._selectedPersona = false;
    const actor = this._actor;
    if (actor) {
        const personas = $gameSystem.getPersonas();
        personas.forEach(function(persona) {
            if (actor.matchPersona(persona) && (!actor.isPersona() || persona.id !== actor.personaData().id)) {
                const enabled = actor.isEquipPersona(persona) || actor.canEquipPersona(persona);
                this.addCommand(persona.name, "persona", enabled, persona);
            }
        }, this);
        if (actor.isPersona() && $gamePartyPersona.personaMembers().includes(actor)) {
            this.addCommand("Equip", "equip", this._enableEquipCommand);
        }
    }
};

  Window_PersonaList.prototype.drawItem = function(index) {
    const actor = this._data[index];
    const rect = this.itemRect(index);
    this.changePaintOpacity(this.isEnabled(actor));
    this.drawPersonaFace(actor, rect.x, rect.y, 144, rect.height - 8);
    this.drawText(actor.name(), rect.x + 168, rect.y, rect.width - 168);
    this.changePaintOpacity(true);
    this.refreshStatus(actor);
  };
  
  $gamePartyPersona.personaMembers().indexOf($gameActors.actor(10))
    if (actor.isPersona()) {
        console.log(actor.name() + " is in the party.");
        if ($gameParty && $gamePartyPersona.personaMembers()) {
            // Access the members property here
        }
        
    };
};
