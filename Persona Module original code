{
 // Define the $dataPersonas array

 Game_Actor.prototype.equippable = function(item) {
    var etypeId = this.equipSlots()[item.etypeId];
    if (etypeId === 1 && this._actorId === 1 && item.meta.race === 'Persona') {
        return this.canEquip(item) && this.isEquipTypeValid(etypeId) && !this.isEquipTypeSealed(etypeId);
    } else {
        return false;
    }
};

Game_Party.prototype.add_persona_by_id = function(actorId) {
    if (!this._actors.contains(actorId)) {
      if (personaActors[actorId]) {
        var actor = $gameActors.actor(actorId);
        this._actors.push(actorId);
        actor.isPersona = true;
        $gamePlayer.refresh();
        return actor;
      }
    }
    return null;
  };
  
// Define a new property called "isPersona" for the Actor class
Object.defineProperty(Game_Actor.prototype, 'isPersona', {
    get: function() {
      return this.actor().meta.race === 'Persona';
    },
    configurable: true
  });
  
  var personaActors = {};

  $gameActors.forEach(function(actor) {
    if (actor.note.includes("<race:Persona>")) {
      actor.isPersona = true;
      personaActors[actor.id] = actor;
    }
  });
  
  //add or remove persona from the party
 // Adds a random Persona actor to the party
 function addPersonabyId(actorId) {
    var actor = personaActors[actorId];
    if (actor) {
      $gameParty.addActor(actorId); // add the Persona actor to the party
      if ($gameParty.members().includes(actor)) {
        console.log(actor.name() + " was added to the party");
        if (actorId === 1) { // if the actor is Morgana
          equipPersonaActor(actor); // equip the Persona actor to Morgana
        }
      }
    }
  };


 //Plugin command to add Persona to a party
Game_Interpreter.prototype.addPersonabyId = function (params) {
    const actorId = parseInt(params.actorId);
    const actor = $gameActors.actor(actorId);
    if (actor && actor.isPersona()) {
        $gameParty.addActor(actorId);
    }
    return true;
};
  
  // Equips the specified Persona actor to Morgana
  function equipPersonaActor(actor) {
    var morgana = $gameActors.actor(1); // get Morgana actor
    morgana.forgetSkill(1); // forget Morgana's attack skill
    morgana.changeClass(actor.actorId(), true); // change Morgana's class to the Persona actor's class
    console.log(actor.name() + " was equipped to Morgana");
  }
  
  // Returns an object containing all Persona actors
  function getPersonaActors() {
    var personaActors = {};
    $gameActors.forEach(function(actor) {
      if (actor.isPersona) {
        personaActors[actor.actorId()] = actor;
      }
    });
    return personaActors;
  };

 
// Add a new menu command
Window_MenuCommand.prototype.addPersonasCommand = function() {
  this.addCommand('Personas', 'personas', true);
};

// Override the standard addOriginalCommands method to include the new menu command
var _Window_MenuCommand_addOriginalCommands = Window_MenuCommand.prototype.addOriginalCommands;
Window_MenuCommand.prototype.addOriginalCommands = function() {
  _Window_MenuCommand_addOriginalCommands.call(this);
  this.addPersonasCommand();
};

//Add Personas command to Main Menu
Scene_Menu.prototype.createCommandWindow = function() {
  this._commandWindow = new Window_MenuCommand(0, 0);
  this._commandWindow.setHandler('personas', this.commandPersonas.bind(this)); // Add this line
  this._commandWindow.setHandler('item', this.commandItem.bind(this));
  this._commandWindow.setHandler('skill', this.commandPersonal.bind(this));
  this._commandWindow.setHandler('equip', this.commandPersonal.bind(this));
  this._commandWindow.setHandler('status', this.commandPersonal.bind(this));
  this._commandWindow.setHandler('options', this.commandOptions.bind(this));
  this._commandWindow.setHandler('save', this.commandSave.bind(this));
  this._commandWindow.setHandler('gameEnd', this.commandGameEnd.bind(this));
  this.addWindow(this._commandWindow);
};

//create the ccommandPersonas method
Scene_Menu.prototype.commandPersonas = function() {
    SceneManager.push(Scene_Personas);
  };
  
//create the Scene_MenuPersona class, which will display the list of actors with the <Persona> note tag in a window

function Scene_Personas() {
    this.initialize.apply(this, arguments);
}

Scene_Personas.prototype = Object.create(Scene_MenuBase.prototype);
Scene_Personas.prototype.constructor = Scene_Personas;

Scene_Personas.prototype.initialize = function() {
    Scene_MenuBase.prototype.initialize.call(this);
};

Scene_Personas.prototype.create = function() {
    Scene_MenuBase.prototype.create.call(this);
    this.createWindowPersonaList();
};

Scene_Personas.prototype.createWindowPersonaList = function() {
    const height = Graphics.boxHeight;
    const width = Graphics.boxWidth / 2;
    const x = 0;
    const y = 0;
    this._personaListWindow = new Window_PersonaList(x, y, width, height);
    this._personaListWindow.setHandler("ok", this.onPersonaListOk.bind(this));
    this._personaListWindow.setHandler("cancel", this.onPersonaListCancel.bind(this));
    this.addWindow(this._personaListWindow);
};

Scene_Personas.prototype.onPersonaListOk = function() {
    const personaListWindow = this._personaListWindow;
    const persona = personaListWindow.item();
    if (persona) {
        SceneManager.push(Scene_Status);
        SceneManager.prepareNextScene([persona.actorId(), true]);
    } else {
        SoundManager.playBuzzer();
    }
};

Scene_Personas.prototype.onPersonaListCancel = function() {
    SceneManager.pop();
};
//define de Window_PersonaList
function Window_PersonaList() {
    this.initialize.apply(this, arguments);
}

Window_PersonaList.prototype = Object.create(Window_Selectable.prototype);
Window_PersonaList.prototype.constructor = Window_PersonaList;

Window_PersonaList.prototype.initialize = function(x, y, width, height) {
    Window_Selectable.prototype.initialize.call(this, x, y, width, height);
    this.refresh();
    this.select(0);
    this.activate();
};

Window_PersonaList.prototype.maxCols = function() {
    return 1;
};

Window_PersonaList.prototype.maxItems = function() {
    return $gameParty.allMembers().filter(function(actor) {
        const note = actor.actor().note;
        return note.match(/<race:Persona>/i) !== null;
    }).length;
};

Window_PersonaList.prototype.item = function() {
    return this._data[this.index()];
};

Window_PersonaList.prototype.includes = function(actor) {
    const note = actor.actor().note;
    return note.match(/<race:Persona>/i) !== null;
};

Window_PersonaList.prototype.makeItemList = function() {
    this._data = $gameParty.allMembers().filter(function(actor) {
        return this.includes(actor);
    }, this);
};

Window_PersonaList.prototype.drawItem = function(index) {
    const actor = this._data[index];
    const rect = this.itemRect(index);
    this.changeTextColor(this.normalColor());
    this.changePaintOpacity(this.isEnabled(actor));
    this.drawText(actor.name(), rect.x, rect.y, rect.width);
};

Window_PersonaList.prototype.refresh = function() {
    this.makeItemList();
    this.createContents();
    this.drawAllItems();
};
};
