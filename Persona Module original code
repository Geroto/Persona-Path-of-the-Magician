{
// Define the Persona Window class
function Window_PersonaList() {
    this.initialize.apply(this, arguments);
  }
  
  Window_PersonaList.prototype = Object.create(Window_Selectable.prototype);
  Window_PersonaList.prototype.constructor = Window_PersonaList;
  
  Window_PersonaList.prototype.initialize = function(x, y, width, height) {
    Window_Selectable.prototype.initialize.call(this, x, y, width, height);
    this._data = [];
    this.refresh();
  };
  
  Window_PersonaList.prototype.maxCols = function() {
    return 1;
  };
  
  Window_PersonaList.prototype.spacing = function() {
    return 48;
  };
  
  Window_PersonaList.prototype.maxItems = function() {
    return this._data ? this._data.length : 1;
  };
  
  Window_PersonaList.prototype.item = function() {
    return this._data[this.index()];
  };
  
  Window_PersonaList.prototype.includes = function(actor) {
    return actor && actor.actor().meta.race === 'Persona';
  };
  
  Window_PersonaList.prototype.isEnabled = function(actor) {
    return true;
  };
  
  Window_PersonaList.prototype.makeItemList = function() {
    this._data = $gameParty.allMembers().filter(function(actor) {
      return this.includes(actor);
    }, this);
  };
  
  Window_PersonaList.prototype.drawItem = function(index) {
    var actor = this._data[index];
    var rect = this.itemRect(index);
    var name = actor.name();
    var level = actor.level;
    this.drawActorName(actor, rect.x + 0, rect.y, rect.width);
    this.drawActorLevel(actor, rect.x + 0, rect.y + 28);
  };
  
  Window_PersonaList.prototype.refresh = function() {
    this.makeItemList();
    this.createContents();
    this.drawAllItems();
  };

  // Scene_Menu

function Scene_Menu() {
    this.initialize.apply(this, arguments);
  }
  
  Scene_Menu.prototype = Object.create(Scene_MenuBase.prototype);
  Scene_Menu.prototype.constructor = Scene_Menu;
  
  Scene_Menu.prototype.initialize = function() {
    Scene_MenuBase.prototype.initialize.call(this);
  };
  
  Scene_Menu.prototype.create = function() {
    Scene_MenuBase.prototype.create.call(this);
    this.createCommandWindow();
    this.createPersonaWindow();
  };
  
  Scene_Menu.prototype.createPersonaWindow = function() {
    this._personaWindow = new Window_PersonaList(0, this._commandWindow.y + this._commandWindow.height, Graphics.boxWidth, Graphics.boxHeight - this._commandWindow.height);
    this.addWindow(this._personaWindow);
    this._personaWindow.setHandler('ok',     this.onPersonaOk.bind(this));
    this._personaWindow.setHandler('cancel', this.popScene.bind(this));
  };
  
  Scene_Menu.prototype.onPersonaOk = function() {
    var actor = this._personaWindow.actor();
    if (actor) {
      SceneManager.push(Scene_PersonaEquip);
      SceneManager.prepareNextScene(actor);
    } else {
      this._personaWindow.activate();
    }
  };

  // Scene_PersonaEquip

function Scene_PersonaEquip() {
    this.initialize.apply(this, arguments);
  }
  
  Scene_PersonaEquip.prototype = Object.create(Scene_MenuBase.prototype);
  Scene_PersonaEquip.prototype.constructor = Scene_PersonaEquip;
  
  Scene_PersonaEquip.prototype.initialize = function() {
    Scene_MenuBase.prototype.initialize.call(this);
  };
  
  Scene_PersonaEquip.prototype.prepare = function(actor) {
    this._actor = actor;
  };
  
  Scene_PersonaEquip.prototype.create = function() {
    Scene_MenuBase.prototype.create.call(this);
    this.createStatusWindow();
    this.createCommandWindow();
    this.createPersonaWindow();
  };
  
  Scene_PersonaEquip.prototype.createStatusWindow = function() {
    this._statusWindow = new Window_PersonaStatus(0, 0, Graphics.boxWidth, Graphics.boxHeight / 2);
    this._statusWindow.setActor(this._actor);
    this.addWindow(this._statusWindow);
  };
  
  Scene_PersonaEquip.prototype.createCommandWindow = function() {
    this._commandWindow = new Window_PersonaCommand(0, this._statusWindow.height, Graphics.boxWidth, Graphics.boxHeight - this._statusWindow.height);
    this._commandWindow.setHandler('equip',   this.commandEquip.bind(this));
    this._commandWindow.setHandler('status',  this.commandStatus.bind(this));
    this._commandWindow.setHandler('remove',  this.commandRemove.bind(this));
    this._commandWindow.setHandler('cancel',  this.popScene.bind(this));
    this.addWindow(this._commandWindow);
  };
  
  Scene_PersonaEquip.prototype.createPersonaWindow = function() {
    var x = this._statusWindow.width;
    var y = 0;
    var width = Graphics.boxWidth - this._statusWindow.width;
    var height = Graphics.boxHeight - this._commandWindow.height;
    this._personaWindow = new Window_PersonaList(x, y, width, height);
  }

  // Scene_PersonaEquip

function Scene_PersonaEquip() {
    this.initialize.apply(this, arguments);
  }
  
  Scene_PersonaEquip.prototype = Object.create(Scene_MenuBase.prototype);
  Scene_PersonaEquip.prototype.constructor = Scene_PersonaEquip;
  
  Scene_PersonaEquip.prototype.initialize = function() {
    Scene_MenuBase.prototype.initialize.call(this);
  };
  
  Scene_PersonaEquip.prototype.prepare = function(actor) {
    this._actor = actor;
  };
  
  Scene_PersonaEquip.prototype.create = function() {
    Scene_MenuBase.prototype.create.call(this);
    this.createStatusWindow();
    this.createCommandWindow();
    this.createPersonaWindow();
  };
  
  Scene_PersonaEquip.prototype.createStatusWindow = function() {
    this._statusWindow = new Window_PersonaStatus(0, 0, Graphics.boxWidth, Graphics.boxHeight / 2);
    this._statusWindow.setActor(this._actor);
    this.addWindow(this._statusWindow);
  };
  
  Scene_PersonaEquip.prototype.createCommandWindow = function() {
    this._commandWindow = new Window_PersonaCommand(0, this._statusWindow.height, Graphics.boxWidth, Graphics.boxHeight - this._statusWindow.height);
    this._commandWindow.setHandler('equip',   this.commandEquip.bind(this));
    this._commandWindow.setHandler('status',  this.commandStatus.bind(this));
    this._commandWindow.setHandler('remove',  this.commandRemove.bind(this));
    this._commandWindow.setHandler('cancel',  this.popScene.bind(this));
    this.addWindow(this._commandWindow);
  };
  
  Scene_PersonaEquip.prototype.createPersonaWindow = function() {
    var x = this._statusWindow.width;
    var y = 0;
    var width = Graphics.boxWidth - this._statusWindow.width;
    var height = Graphics.boxHeight - this._commandWindow.height;
    this._personaWindow = new Window_PersonaList(x, y, width, height);
  };
  
  // Scene_Menu
//
// This scene handles the main menu.

function Scene_Menu() {
    this.initialize.apply(this, arguments);
  }
  
  Scene_Menu.prototype = Object.create(Scene_MenuBase.prototype);
  Scene_Menu.prototype.constructor = Scene_Menu;
  
  Scene_Menu.prototype.initialize = function() {
    Scene_MenuBase.prototype.initialize.call(this);
  };
  
  Scene_Menu.prototype.create = function() {
    Scene_MenuBase.prototype.create.call(this);
    this.createCommandWindow();
    this.createPersonaWindow(); // Create the Persona Window
  };
  
  Scene_Menu.prototype.createCommandWindow = function() {
    this._commandWindow = new Window_MenuCommand(0, 0);
    this._commandWindow.setHandler("personas", this.commandPersonas.bind(this)); // Add the Personas command
    this._commandWindow.setHandler('item',      this.commandItem.bind(this));
    this._commandWindow.setHandler('skill',     this.commandPersonal.bind(this));
    this._commandWindow.setHandler('equip',     this.commandPersonal.bind(this));
    this._commandWindow.setHandler('status',    this.commandPersonal.bind(this));
    this._commandWindow.setHandler('formation', this.commandFormation.bind(this));
    this._commandWindow.setHandler('options',   this.commandOptions.bind(this));
    this._commandWindow.setHandler('save',      this.commandSave.bind(this));
    this._commandWindow.setHandler('gameEnd',   this.commandGameEnd.bind(this));
    this._commandWindow.setHandler('cancel',    this.popScene.bind(this));
        this.addWindow(this._commandWindow);
  };
  
  Scene_Menu.prototype.createPersonaWindow = function() {
    this._personaWindow = new Window_MenuPersonaList(0, this._commandWindow.height);
    this._personaWindow.setHandler("cancel", this.popScene.bind(this));
    this._personaWindow.setHandler("equip", this.commandEquip.bind(this));
    this._personaWindow.setHandler("status", this.commandStatus.bind(this));
    this._personaWindow.setHandler("remove", this.commandRemove.bind(this));
    this.addWindow(this._personaWindow);
  };
  
  Scene_Menu.prototype.commandPersonas = function() {
    SceneManager.push(Scene_MenuPersona);
  };
  
};  
